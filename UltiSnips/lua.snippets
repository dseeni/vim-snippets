priority -50

#################################
# Snippets for the Lua language #
#################################
snippet #! "#!/usr/bin/env lua" b
#!/usr/bin/env lua
$0
endsnippet

snippet dl "disable LSP next line"
$1---@diagnostic disable-next-line
endsnippet

snippet t "type annotation"
---@param $1
endsnippet

snippet f "local fn" bi
local function ${1:fname}(${2:...})
	${0:${VISUAL}}
end
endsnippet

snippet fa "anonymous fn" bi
= function(${1})${2}end
endsnippet

snippet fn "fn" bi
function ${1:fname}(${2:...})
	${0:${VISUAL}}
end
endsnippet

snippet fo "for" bi
for ${1:i}=${2:1},${3:10} do
	${0:${VISUAL}}
end
endsnippet

snippet fon "numeric for loop" b
for ${1:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
	${1:${VISUAL}}
end
endsnippet

snippet fp "pair loop" bi
for ${1:name}, ${2:val} in pairs(${3:${VISUAL}}) do
	$0
end
endsnippet

snippet fi "ipair loop" bi
for ${3:_}, ${2:v} in ipairs(${1:${VISUAL}}) do
	$0
end
endsnippet

snippet s "string append" bi
..$0
endsnippet

snippet if "if" w
if ${1:condition} then
	${2:${VISUAL}}
end
endsnippet

snippet ife "if/then/else" w
if ${1:${VISUAL}} then
	${2:-- if condition}
else
	${0:-- else}
end
endsnippet

snippet elf "elseif" w
elseif ${1:condition} then
	${0:${VISUAL}}
endsnippet

snippet rp "repeat" w
repeat
	${1:--body}
until ${0:${VISUAL}}
endsnippet

snippet rn "force return inside function" bw
i$0f true then return end
endsnippet

snippet ret "return" w
return ${0:${VISUAL}}
endsnippet

snippet while "while" w
while ${1:condition} do
	${0:${VISUAL}}
end
endsnippet

snippet p "print"  bi
p(${1:${VISUAL}})
endsnippet

snippet im "import" w
import "${1:${VISUAL}}"
endsnippet

snippet d "do block" b
do
	${1:${VISUAL}}
end
endsnippet

snippet r "repeat loop" b
repeat
	${1:${VISUAL}}
until $0
endsnippet

snippet w "while loop" b
while ${1:${VISUAL}} do
	$0
end
endsnippet

snippet ife "if/else statement" b
if $1 then
$2
else
$0
end
endsnippet

snippet eif "if/elseif statement" b
if $1 then
	$2
elseif $3 then
	$0
end
endsnippet

snippet eife "if/elseif/else statement" b
if $1 then
	$2
elseif $3 then
	$4
else
	$0
end
endsnippet

snippet pc "pcall statement" bi
local ok, err = pcall(${1:${VISUAL}})
if not ok then
	handler(${2:ok, err})
${3:else
	success(${4:ok, err})
}end
endsnippet

snippet l "local" bi
local ${0:${VISUAL}}${1}
endsnippet

snippet ll "local x = _" bi
local ${1} = ${0:${VISUAL}}
endsnippet

snippet pt "p(type(var))" bi
p(type(${1:${VISUAL}}))
endsnippet

snippet ty "typefn(var)" bi
type(${1:${VISUAL}})
endsnippet

# vim:ft=snippets:
