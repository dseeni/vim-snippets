priority -50

###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1$3
endsnippet

snippet f "function!" b
function! ${1:function_name}($2)
	${3:" code}
endfunction
endsnippet

snippet fu "function" b
function ${1:function_name}($2)
	${3:" code}
endfunction
endsnippet

snippet sf "function!" b
function! s:${1:function_name}($2)
	${3:" code}
endfunction
endsnippet

snippet sfu "function" b
function s:${1:function_name}($2)
	${3:" code}
endfunction
endsnippet

snippet pl "echo dual line w/ln" b
echo "`!v line(".") . ':'` $1 = "| echo $1
endsnippet

snippet p "ds echo single line w/ln " b
echo "`!v line(".") . ':'` $1 = " . $1
endsnippet

snippet pel "print(echo) error log v:errors" b
function! ErrorLog()
  if len(v:errors) > 0
    echo 'Errors Found: ' . len(v:errors)
  else
    echo 'All Tests Passed!'
  endif
  for i in v:errors
    echo i
  endfor
endfunction
call ErrorLog()
endsnippet

snippet e "echo . single space" b
echo $1
endsnippet

snippet s "echo . no space" b
echo$1
endsnippet





# vim:ft=snippets:






























